@bfs & dfs ASS1 ( 4 4 1 1
1 2
2 3
3 4
4 1


#include <bits/stdc++.h>
#include <omp.h>
using namespace std;
const int N = 1e5 + 5;
vector<int> g[N];
bool vis[N];
void bfs(int s) {
 queue<int> q;
 q.push(s);
 vis[s] = true;
 while (!q.empty()) {
 int u = q.front();
 q.pop();
 #pragma omp parallel for
 for (int i = 0; i < g[u].size(); i++) {
 int v = g[u][i];
 if (!vis[v]) {
 vis[v] = true;
 q.push(v);
 }
 }
 }
}
void dfs(int u) {
 vis[u] = true;
 #pragma omp parallel for
 for (int i = 0; i < g[u].size(); i++) {
 int v = g[u][i];
 if (!vis[v])
 dfs(v);
 }
}
int main() {
 int n, m, s, choice;
 cin >> n >> m >> s >> choice;
 for (int i = 0; i < m; i++) {
 int x, y;
 cin >> x >> y;
 g[x].push_back(y);
 g[y].push_back(x);
 }
 if (choice == 1)
 bfs(s);
 else if (choice == 2)
 dfs(s);
 else
 cout << "Invalid choice\n";
 cout << "The result of traversal:\n";
 for (int i = 1; i <= n; i++) {
 if (vis[i])
 cout << i << " ";
 }
 cout << endl;
 return 0;
}
.
.
.

@@min max ASS3

#include <iostream>
#include <vector>
#include <limits.h>
#include <omp.h>
using namespace std;
void min_reduction(vector<int>& arr) {
 int min_value = INT_MAX;
#pragma omp parallel for reduction(min: min_value)
 for (int i = 0; i < arr.size(); i++) {
 if (arr[i] < min_value) {
 min_value = arr[i];
 }
 }
 cout << "Minimum value: " << min_value << endl;
}
void max_reduction(vector<int>& arr) {
 int max_value = INT_MIN;
#pragma omp parallel for reduction(max: max_value)
 for (int i = 0; i < arr.size(); i++) {
 if (arr[i] > max_value) {
 max_value = arr[i];
 }
 }
 cout << "Maximum value: " << max_value << endl;
}
void sum_reduction(vector<int>& arr) {
 int sum = 0;
#pragma omp parallel for reduction(+: sum)
 for (int i = 0; i < arr.size(); i++) {
 sum += arr[i];
 }
 cout << "Sum: " << sum << endl;
}
void average_reduction(vector<int>& arr) {
 int sum = 0;
#pragma omp parallel for reduction(+: sum)
 for (int i = 0; i < arr.size(); i++) {
 sum += arr[i];
 }
 cout << "Average: " << (double)sum / arr.size() << endl;
}
int main() {
 int n;
 cout << "Enter the size of the array: ";
 cin >> n;
 vector<int> arr(n);
 cout << "Enter the elements of the array:" << endl;
 for (int i = 0; i < n; i++) {
 cin >> arr[i];
 }
 min_reduction(arr);
 max_reduction(arr);
 sum_reduction(arr);
 average_reduction(arr);
return 0;
}
.
.
.


@@bubble sort parrallel ASS2

#include <iostream>
#include <cstdlib>
#include <ctime>
#include <omp.h>
using namespace std;
// Parallel Bubble Sort function
void parallelBubbleSort(int *array, int n) {
 int i, j;
 #pragma omp parallel for private(i, j) shared(array)
 for (i = 0; i < n-1; i++) {
 for (j = 0; j < n-i-1; j++) {
 if (array[j] > array[j+1]) {
 // Swap elements
 int temp = array[j];
 array[j] = array[j+1];
 array[j+1] = temp;
 }
 }
 }
}
// Parallel Merge Sort function
void merge(int *array, int l, int m, int r) {
 int i, j, k;
 int n1 = m - l + 1;
 int n2 = r - m;
 // Create temp arrays
 int *L = new int[n1];
 int *R = new int[n2];
 // Copy data to temp arrays L[] and R[]
 for (i = 0; i < n1; i++)
 L[i] = array[l + i];
 for (j = 0; j < n2; j++)
 R[j] = array[m + 1+ j];
 // Merge the temp arrays back into array[l..r]
 i = 0;
 j = 0;
 k = l;
 while (i < n1 && j < n2) {
 if (L[i] <= R[j]) {
 array[k] = L[i];
 i++;
 } else {
 array[k] = R[j];
 j++;
 }
 k++;
 }
 // Copy the remaining elements of L[], if there are any
 while (i < n1) {
 array[k] = L[i];
 i++;
 k++;
 }
 // Copy the remaining elements of R[], if there are any
 while (j < n2) {
 array[k] = R[j];
 j++;
 k++;
 }
 delete [] L;
 delete [] R;
}
void parallelMergeSort(int *array, int l, int r) {
 if (l < r) {
 int m = l+(r-l)/2;
 #pragma omp parallel sections
 {
 #pragma omp section
 parallelMergeSort(array, l, m);
 #pragma omp section
 parallelMergeSort(array, m+1, r);
 }
 merge(array, l, m, r);
 }
}
int main() {
 int n;
 cout << "Enter the size of the array: ";
 cin >> n;
int *array = new int[n];
srand(time(0));
for (int i = 0; i < n; i++) {
 array[i] = rand() % 100;
}
cout << "Original Array: ";
for (int i = 0; i < n; i++) {
 cout << array[i] << " ";
}
cout << endl;
int choice;
cout << "Enter 1 for Parallel Bubble Sort or 2 for Parallel Merge Sort: 
";
cin >> choice;
if (choice == 1) {
 parallelBubbleSort(array, n);
} else if (choice == 2) {
 parallelMergeSort(array, 0, n-1);
} else {
 cout << "Invalid choice. Exiting program." << endl;
 return 0;
}
cout << "Sorted Array: ";
for (int i = 0; i < n; i++) {
 cout << array[i] << " ";
}
cout << endl;
delete [] array;
return 0;
}

.
.
.

@mini proj using mpi

#include<iostream>
#include<omp.h>
using namespace std;
int k=0;
class array
{
public:
int partition(int arr[], int low_index, int high_index)
{
int i, j, temp, key;
key = arr[low_index];
i= low_index + 1;
j= high_index;
while(1)
{
while(i < high_index && key >= arr[i])
 i++;
while(key < arr[j])
 j--;
if(i < j)
{
temp = arr[i];
arr[i] = arr[j];
arr[j] = temp;
}
else
{
temp= arr[low_index];
arr[low_index] = arr[j];
arr[j]= temp;
return(j);}}}
void quicksort(int arr[], int low_index, int high_index)
{
int j;
if(low_index < high_index)
{
j = partition(arr, low_index, high_index);
cout<<"Pivot element with index "<<j<<" has been found out by thread "<<k<<"\n";
#pragma omp parallel sections
{
 #pragma omp section
 {
 k=k+1;
 quicksort(arr, low_index, j - 1);
 }
 #pragma omp section
 {
 k=k+1;
 quicksort(arr, j + 1, high_index);
 }
}}}};
int main()
{
array a;
int arr[100];
int n,i;
cout<<"Enter the value of n\n";
cin>>n;
cout<<"Enter the "<<n<<" number of elements \n";
for(i=0;i<n;i++)
{
cin>>arr[i];
}
a.quicksort(arr, 0, n - 1);
cout<<"Elements of array after sorting \n";
for(i=0;i<n;i++)
{
cout<<arr[i]<<"\t";}
cout<<"\n";}

